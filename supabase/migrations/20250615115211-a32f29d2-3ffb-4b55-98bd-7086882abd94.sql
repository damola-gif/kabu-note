
-- Create an enum type for room privacy levels
CREATE TYPE public.room_privacy_level AS ENUM ('public', 'private', 'invite_only');

-- Create the community_rooms table
CREATE TABLE public.community_rooms (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
  name TEXT NOT NULL,
  description TEXT,
  creator_id UUID REFERENCES public.profiles(id) ON DELETE SET NULL,
  privacy_level public.room_privacy_level NOT NULL DEFAULT 'public',
  invite_code TEXT UNIQUE
);

-- Create the room_members table
CREATE TABLE public.room_members (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  room_id UUID NOT NULL REFERENCES public.community_rooms(id) ON DELETE CASCADE,
  user_id UUID NOT NULL REFERENCES public.profiles(id) ON DELETE CASCADE,
  joined_at TIMESTAMPTZ NOT NULL DEFAULT now(),
  CONSTRAINT unique_room_member UNIQUE (room_id, user_id)
);

-- Function to automatically add creator as a member of the room
CREATE OR REPLACE FUNCTION public.add_creator_to_room_members()
RETURNS TRIGGER AS $$
BEGIN
  INSERT INTO public.room_members (room_id, user_id)
  VALUES (NEW.id, NEW.creator_id);
  RETURN NEW;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Trigger the function after a new room is created
CREATE TRIGGER on_community_room_created
  AFTER INSERT ON public.community_rooms
  FOR EACH ROW EXECUTE PROCEDURE public.add_creator_to_room_members();

-- RLS policies for community_rooms
ALTER TABLE public.community_rooms ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Public rooms are viewable by everyone."
  ON public.community_rooms FOR SELECT
  USING (privacy_level = 'public');
CREATE POLICY "Users can create rooms."
  ON public.community_rooms FOR INSERT
  WITH CHECK (auth.uid() = creator_id);
CREATE POLICY "Room creators can update their own rooms."
  ON public.community_rooms FOR UPDATE
  USING (auth.uid() = creator_id);
CREATE POLICY "Room creators can delete their own rooms."
  ON public.community_rooms FOR DELETE
  USING (auth.uid() = creator_id);

-- RLS policies for room_members
ALTER TABLE public.room_members ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Users can see members of rooms they are in."
  ON public.room_members FOR SELECT
  USING (
    EXISTS (
      SELECT 1 FROM public.room_members AS members_check
      WHERE members_check.room_id = public.room_members.room_id AND members_check.user_id = auth.uid()
    ) OR EXISTS (
      SELECT 1 FROM public.community_rooms
      WHERE id = public.room_members.room_id AND privacy_level = 'public'
    )
  );

CREATE POLICY "Users can join rooms (app logic)."
  ON public.room_members FOR INSERT
  WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can leave rooms."
  ON public.room_members FOR DELETE
  USING (auth.uid() = user_id);
